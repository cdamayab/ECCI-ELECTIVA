# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Graficar_funciones.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QGraphicsScene, QGraphicsView, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Titulo
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")

        # ComboBox para seleccionar la funcion
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")

        # Boton para graficar
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setObjectName("pushButton")

        # Inputs para valores minimo y maximo
        self.textEdit = QLineEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QLineEdit(self.centralwidget)
        self.textEdit_2.setObjectName("textEdit_2")

        # Labels para inputs
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")

        # Layout horizontal para los inputs y labels
        input_layout = QHBoxLayout()
        input_layout.addWidget(self.label_2)
        input_layout.addWidget(self.textEdit)
        input_layout.addStretch(1)
        input_layout.addWidget(self.label_3)
        input_layout.addWidget(self.textEdit_2)

        # QGraphicsView para mostrar el grafico
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName("graphicsView")

        # Footer con nombres y logo
        footer_layout = QHBoxLayout()
        names_layout = QVBoxLayout()

        self.label1 = QLabel('Cristhian Amaya', self.centralwidget)
        self.label2 = QLabel('Diego Ariztizabal', self.centralwidget)
        self.label3 = QLabel('Daniel Cardenas', self.centralwidget)
        self.label4 = QLabel('Nicolas Gonzalez', self.centralwidget)

        names_layout.addWidget(self.label1)
        names_layout.addWidget(self.label2)
        names_layout.addWidget(self.label3)
        names_layout.addWidget(self.label4)

        # Logo de la universidad
        image_label_logo = QLabel(self.centralwidget)
        pixmap = QtGui.QPixmap('./ecci.jpg')
        image_label_logo.setPixmap(pixmap)
        image_label_logo.setScaledContents(True)
        image_label_logo.setFixedSize(150, 150)

        # Anadir nombres y logo al footer_layout
        footer_layout.addLayout(names_layout)
        footer_layout.addWidget(image_label_logo)

        # Layout principal para organizar todo
        main_layout = QVBoxLayout(self.centralwidget)
        main_layout.addWidget(self.label)
        main_layout.addWidget(self.comboBox)
        main_layout.addLayout(input_layout)
        main_layout.addWidget(self.pushButton)
        main_layout.addWidget(self.graphicsView)
        main_layout.addLayout(footer_layout)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Llama la funcion que grafica
        self.pushButton.clicked.connect(self.graficar)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Graficar Funciones"))
        self.label.setText(_translate("MainWindow", "GRAFICAR"))
        self.comboBox.setCurrentText(_translate("MainWindow", "Seno"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Seno"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Coseno"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Tangente"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Cotangente"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Secante"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Cosecante"))
        self.pushButton.setText(_translate("MainWindow", "GRAFICAR"))
        self.label_2.setText(_translate("MainWindow", "Valor Min"))
        self.label_3.setText(_translate("MainWindow", "Valor Max"))

    def graficar(self):
        seleccion = self.comboBox.currentText()

        try:
            a = float(self.textEdit.text())  # Valor minimo
            b = float(self.textEdit_2.text())  # Valor maximo

            if a >= b:
                return

            # Crear la figura
            fig, ax = plt.subplots()

            # Graficar segun la seleccion del comboBox
            x = np.linspace(a, b, 1000)

            if seleccion == "Seno":
                y = np.sin(x)
                ax.set_title("Grafico de Seno")
            elif seleccion == "Coseno":
                y = np.cos(x)
                ax.set_title("Grafico de Coseno")
            elif seleccion == "Tangente":
                y = np.tan(x)
                ax.set_title("Grafico de Tangente")
            elif seleccion == "Cotangente":
                y = 1 / np.tan(x)
                ax.set_title("Grafico de Cotangente")
            elif seleccion == "Secante":
                y = 1 / np.cos(x)
                ax.set_title("Grafico de Secante")
            elif seleccion == "Cosecante":
                y = 1 / np.sin(x)
                ax.set_title("Grafico de Cosecante")

            ax.plot(x, y)

            # Convertir el grafico en un canvas de Qt
            canvas = FigureCanvas(fig)
            scene = QGraphicsScene()
            scene.addWidget(canvas)

            # Mostrar el grafico en el QGraphicsView
            self.graphicsView.setScene(scene)

        except ValueError:
            return


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

